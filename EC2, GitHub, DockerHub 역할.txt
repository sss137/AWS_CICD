☆ GitHub (레파지토리 + Actions(자동화 엔진))
1. 소스코드 저장소
2. GitHub Actions 
   - 코드를 push하면 자동 빌드 & 테스트 실행
   - Dockerfile 기반으로 이미지 빌드 후 DockerHub에 push까지 가능
   참고) CI → 빌드 & 테스트 & 도커 이미지 빌드
           CD → SSH로 EC2 접속해서 docker pull & docker run 실행
           즉, GitHub Actions이 CD 작업까지 "트리거 + 제어" 해줌
		
☆ DockerHub
1. Docker 이미지 저장소
2. EC2 서버는 이 저장소에서 pull 받아 실행

“앱 실행 패키지(Docker 이미지)를 보관하는 창고”

☆ EC2 (AWS 서버)
1. 실제 서비스 운영 서버
2. DockerHub에서 이미지 가져오기 → 컨테이너 실행
3. 사용자는 EC2 서버 IP/도메인으로 접속해 서비스 이용

"CD(Continuous Deployment, 지속적 배포)의 대상"

☆ CI vs CD 구분
CI (지속적 통합)
GitHub Actions에서 주로 수행
코드 → 빌드 → 테스트 → Docker 이미지 빌드 → DockerHub 업로드

CD (지속적 배포/전개)
최종 산출물(도커 이미지)을 실제 서버(EC2)에 배포하는 과정
EC2에서 docker pull + docker run 으로 서비스 업데이트
GitHub Actions workflow 안에 “EC2 원격 배포 단계”를 넣으면 자동화 가능

따라서 CD 자동화는 EC2 서버에서 실행/배포가 일어나도록 GitHub Actions이 제어함
즉, CD는 단순히 "EC2 혼자"라기보단 EC2를 최종 배포 대상으로 삼아 GitHub Actions이 자동화하는 구조입니다.

☆ 한눈에 보는 흐름
[개발자] → GitHub (push)
              │
              ▼
        GitHub Actions (cicd.yml 실행)
              │
              ├─ Maven 빌드 (.war 생성)
              ├─ Docker build (Dockerfile 기반)
              └─ Docker push → DockerHub 업로드
              
[배포 단계] → EC2 서버 접속
              │
              ├─ Docker pull (DockerHub에서 최신 이미지 다운로드)
              └─ Docker run (실행 → 사용자가 접속 가능)